// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const authenticateUser = `-- name: AuthenticateUser :one
SELECT username, name, password FROM users
WHERE username = $1
AND password = $2
`

type AuthenticateUserParams struct {
	Username string
	Password string
}

func (q *Queries) AuthenticateUser(ctx context.Context, arg AuthenticateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, authenticateUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(&i.Username, &i.Name, &i.Password)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, name, password)
VALUES ($1, $2, $3)
RETURNING username, name, password
`

type CreateUserParams struct {
	Username string
	Name     string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Name, arg.Password)
	var i User
	err := row.Scan(&i.Username, &i.Name, &i.Password)
	return i, err
}

const deleteDetails = `-- name: DeleteDetails :one
DELETE FROM user_details
WHERE username = $1
RETURNING user_id, username, first_name, last_name, gender, password, status
`

func (q *Queries) DeleteDetails(ctx context.Context, username sql.NullString) (UserDetail, error) {
	row := q.db.QueryRowContext(ctx, deleteDetails, username)
	var i UserDetail
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.Password,
		&i.Status,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE username = $1
AND password = $2
RETURNING username, name, password
`

type DeleteUserParams struct {
	Username string
	Password string
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(&i.Username, &i.Name, &i.Password)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, name, password FROM users
WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(&i.Username, &i.Name, &i.Password)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT username, name, password FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.Username, &i.Name, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
